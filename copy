#!/usr/bin/env python
# -*- coding: utf-8 -*-

# copy - Advanced command line copy tool

# Copyright (C) 2013 Maik Messerschmidt

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# standard imports
import argparse
import sys

from os.path import basename

# local imports
from libcopy import VERSION
from libcopy.manager import CopyManager
from libcopy.walk import L_FOLLOW_TOP, L_FOLLOW_ALL, L_PRESERVE

PROG = basename(sys.argv[0])

def main():
	parser = argparse.ArgumentParser(description='Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY')
	parser.add_argument('-a', action='store_true', dest='preserve_and_recurse', default=False, help='same as -dpR')
	parser.add_argument('-r', '-R', action='store_true', dest='recurse', default=False, help='recurse into directories')
	
	# symlink related:
	parser.add_argument('-d', '-P', action='store_const', dest='links', const=L_PRESERVE, default=None, help='preserve (sym)links')
	parser.add_argument('-L', action='store_const', dest='links', const=L_FOLLOW_ALL, help='follow all symlinks')
	parser.add_argument('-H', action='store_const', dest='links', const=L_FOLLOW_TOP, help='follow symlinks on command line')
	
	parser.add_argument('-p', action='store_true', dest='preserve_attributes', help='preserve file attributes if possible')
	parser.add_argument('-f', action='store_true', dest='force', default=False, help='force overwriting existing destination files')
	parser.add_argument('-e', '--exclude', action='append', dest='excludes', metavar='EXCLUDE_PATTERN', default=[], help='exclude file pattern')
	parser.add_argument('-i', '--interactive', action='store_true', dest='interactive', help='prompt before overwriting existing files')
	# parser.add_argument('-l', '-s', action='store_true', dest='create_symlinks_only', default=False, help='Create (sym)links instead of copying.')
	parser.add_argument('sources', metavar='SOURCE', nargs='+')
	parser.add_argument('target', metavar='DEST')
	
	# version info
	parser.add_argument('--version', '-V', action='version', version="%s %s" % (PROG, VERSION) )
	
	# verbose output
	parser.add_argument('--verbose', '-v', action="count", default=0, help='be more verbose, -vv gives detailed progress information')
	
	# advanced options
	parser.add_argument('-c', action='store_true', dest='resume', help='continue already existing partly copied files')
	# parser.add_argument('--dry-run', action='store_true', dest="dry_run", default=False, help='Does a dry-run telling the user what would happen.')
	
	options = parser.parse_args()
	# handle -a
	if options.preserve_and_recurse:
		options.recurse = True
		options.preserve_attributes = True
	
	# set symlink policy
	if options.links == None and options.recurse:
		options.links = L_PRESERVE
	elif options.links == None:
		options.links = L_FOLLOW_TOP

	try:
		m = CopyManager(options)
		m.start()
	except KeyboardInterrupt:
		m.stop()
		sys.stderr.write('\n')
		sys.exit(-1)

if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt:
		sys.stderr.write('\n')
		
